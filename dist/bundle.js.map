{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://card-game/webpack/bootstrap","webpack://card-game/webpack/runtime/define property getters","webpack://card-game/webpack/runtime/hasOwnProperty shorthand","webpack://card-game/./src/start-page-render.ts","webpack://card-game/./src/timer.ts","webpack://card-game/./src/cards.ts","webpack://card-game/./src/helpers.ts","webpack://card-game/./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { GamePageRender } from './main'\nexport const startPageRender = () => {\n    const body = document.querySelector('body')\n    if (body) {\n        body.innerHTML = `\n        <div class=\"container\">\n            <div class=\"container-content\">\n                <h1 class=\"container-title\">Выбери<br>сложность</h1>\n                <div class=\"container-levels\">\n                    <input type=\"radio\" id=\"basic\" class=\"container-level\" name=\"levels\" value=\"1\"></input>\n                    <label class=\"radio-label\" for=\"basic\">1</label>\n                    <input type=\"radio\" id=\"middle\" class=\"container-level\" name=\"levels\" value=\"2\"></input>\n                    <label class=\"radio-label\" for=\"middle\">2</label>\n                    <input type=\"radio\" id=\"advanced\" class=\"container-level\" name=\"levels\" value=\"3\"></input>\n                    <label class=\"radio-label\" for=\"advanced\">3</label>\n                </div>\n                <button class=\"start-button\">Старт</button>\n            </div> \n        </div>`\n    }\n\n    const startButton = document.querySelector('.start-button')\n    const containerLevels = document.querySelectorAll('.container-level')\n\n    let selectedLevel: string\n\n    startButton?.addEventListener('click', () => {\n        let isChecked: boolean = false\n        let numberOfPairs: any = null\n        for (const containerLevel of containerLevels) {\n            if (containerLevel instanceof HTMLInputElement) {\n                if (containerLevel.checked === true) {\n                    isChecked = true\n                    selectedLevel = containerLevel.value\n                }\n            }\n        }\n        if (!isChecked) {\n            alert('Выберите уровень')\n            return\n        }\n\n        if (selectedLevel === '1') {\n            numberOfPairs = 3\n        }\n        if (selectedLevel === '2') {\n            numberOfPairs = 6\n        }\n        if (selectedLevel === '3') {\n            numberOfPairs = 9\n        }\n\n        GamePageRender(numberOfPairs)\n    })\n}\n\n","export function timer() {\n    const minutesElement = document.querySelector('.minutes')\n    const secondsElement = document.querySelector('.seconds')\n\n    let minutes: number = 0\n    let seconds: number = 0\n    let interval\n\n    clearInterval(interval)\n    interval = setInterval(startTimer, 1000)\n\n    function startTimer() {\n        seconds++\n        if (seconds <= 9) {\n            if (secondsElement) {\n                secondsElement.textContent = '0' + String(seconds)\n            }\n        }\n        if (seconds > 9) {\n            if (secondsElement) {\n                secondsElement.textContent = String(seconds)\n            }\n        }\n        if (seconds >= 60) {\n            minutes++\n            if (minutesElement) {\n                minutesElement.textContent = '0' + String(minutes)\n            }\n            seconds = 0\n            if (secondsElement) {\n                secondsElement.textContent = '0' + String(seconds)\n            }\n        }\n    }\n}\n\nexport function gameTimeHandler() {\n    const minutesElement = document.querySelector('.minutes')\n    const secondsElement = document.querySelector('.seconds')\n\n    let minutesText\n    let secondsText\n    let gameTime: string\n\n    if (minutesElement) {\n        minutesText = minutesElement.textContent\n    }\n\n    if (secondsElement) {\n        secondsText = secondsElement.textContent\n    }\n\n    gameTime = minutesText! + secondsText!\n    return gameTime\n}\n","import { startPageRender } from './start-page-render'\nimport { gameTimeHandler } from './timer'\n\nexport const compareGameCards = (\n    gameCards: NodeList,\n    setOfCards: Array<string>,\n) => {\n    let clickedCards: Array<string> = []\n    let matchCounter = 0\n    const body = document.querySelector('body')\n\n    for (let i = 0; i < gameCards.length; i++) {\n        const gameCard = gameCards[i]\n        const gameCardClick = () => {\n            gameCard.addEventListener('click', (event) => {\n                const target = event.target as HTMLImageElement\n                target.src = setOfCards[i]\n    \n                if (!clickedCards[0]) {\n                    clickedCards[0] = setOfCards[i]\n                } else {\n                    clickedCards[1] = setOfCards[i]\n    \n                    if (clickedCards[0] === clickedCards[1]) {\n                        matchCounter++\n    \n                        if (matchCounter === setOfCards.length / 2) {\n                            if (body) {\n                                body.innerHTML += `\n                                <div class=\"game-result-container\">\n                                    <div class=\"result-content\">\n                                        <img src=\"./static/images/celebration.png\">\n                                        <h1 class=\"result-title\">Вы выиграли!</h1>\n                                            <div class=\"time-spent\">Затраченное время:\n                                                <h2 class=\"time-spent-timer\">${gameTimeHandler()}</h2>\n                                            </div>\n                                        <button class=\"result-button\">Начать заново</button>\n                                    </div>\n                                </div>`\n    \n                                document\n                                    .querySelector('.result-button')\n                                    ?.addEventListener('click', () => {\n                                        startPageRender()\n                                    })\n                            }\n                        }\n                    } else {\n                        if (body) {\n                            body.innerHTML += `\n                                <div class=\"game-result-container\">\n                                    <div class=\"result-content\">\n                                        <img src=\"./static/images/dead.png\">\n                                        <h1 class=\"result-title\">Вы проиграли!</h1>\n                                            <div class=\"time-spent\">Затраченное время:\n                                                <h2 class=\"time-spent-timer\">${gameTimeHandler()}</h2>\n                                            </div>\n                                        <button class=\"result-button\">Начать заново</button>\n                                    </div>\n                                </div>`\n    \n                            document\n                                .querySelector('.result-button')\n                                ?.addEventListener('click', () => {\n                                    startPageRender()\n                                })\n                        }\n                    }\n                    clickedCards = []\n                }\n            })\n        }\n        setTimeout(gameCardClick, 5000)\n    }\n}\n","export const randomizeIndex = (minIndex: number, maxIndex: number) => {\n    if (minIndex < 0) {\n        return\n    } else {\n        const index: number = Math.floor(Math.random()* (maxIndex - minIndex))\n        return index\n    }\n}\n\n//алгоритм тасования Фишера — Йетса\nexport const shuffle = (array: string[]) => {\n    let j: number = array.length, t: string, i: number\n    while (j) {\n      i = Math.floor(Math.random() * j--)\n      t = array[j]\n      array[j] = array[i]\n      array[i] = t\n    }\n    return array\n}\n\nexport default randomizeIndex; shuffle\n\n// module.exports = { randomizeIndex, shuffle }","import { compareGameCards } from './cards'\nimport { startPageRender } from './start-page-render'\nimport { timer } from './timer'\nimport { randomizeIndex, shuffle } from './helpers'\nimport './style.css'\n\nstartPageRender()\n\nconst cardSuits: string[] = ['Diamonds', 'Clubs', 'Spades', 'Hearts']\nconst cardRanks: string[] = ['6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n\nconst body = document.querySelector('body')\n\nexport const GamePageRender = (numberOfPairs: number) => {\n    if (body) {\n        body.innerHTML = `\n        <div class=\"game-page-container\">\n            <div class=\"timer\">\n                <div class=\"time\">\n                    <span class=\"timer-number minutes\">00.</span>\n                    <span>min</span>\n                </div>\n                <div class=\"time\">\n                    <span class=\"timer-number seconds\">00</span>\n                    <span>sec</span>\n                </div>\n            </div>\n            <div class=\"button\">\n                <button class=\"restart-button\">Начать заново</button>\n            </div>\n        </div>\n        <div class=\"game-container\">\n            <div class=\"game-space\"></div>\n        </div>`\n\n        document\n            .querySelector('.restart-button')\n            ?.addEventListener('click', () => {\n                startPageRender()\n            })\n    }\n\n    timer()\n\n    let setOfCards: string[] = []\n \n    for (let i = 0; i < numberOfPairs; i++) {\n        let randomCardSuit = randomizeIndex(0, cardSuits.length)//test\n        let randomCardRank = randomizeIndex(0, cardRanks.length)//test\n\n        let cardElement: string =\n            '../static/images/' +\n            cardRanks[randomCardRank!] +\n            cardSuits[randomCardSuit!] +\n            '.jpg'\n\n        setOfCards.push(cardElement, cardElement)\n    }\n\n    shuffle(setOfCards)//test\n\n    const gameSpace = document.querySelector('.game-space')\n    for (let j = 0; j < setOfCards.length; j++) {\n        const cardElem = document.createElement('img')\n        cardElem.src = setOfCards[j]\n        gameSpace?.appendChild(cardElem)\n        cardElem.classList.add('game-card')\n    }\n\n    const gameCards = document.querySelectorAll('.game-card')\n    const hideGameCards = () => {\n        for (const gameCard of gameCards) {\n            if (gameCard instanceof HTMLImageElement) {\n                gameCard.src = '../static/images/background.jpg'\n            }\n        }\n    }\n\n    setTimeout(hideGameCards, 5000)\n    compareGameCards(gameCards, setOfCards)\n}\n\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","startPageRender","body","document","querySelector","innerHTML","startButton","containerLevels","querySelectorAll","selectedLevel","addEventListener","isChecked","numberOfPairs","containerLevel","HTMLInputElement","checked","value","GamePageRender","alert","gameTimeHandler","minutesElement","secondsElement","minutesText","secondsText","gameTime","textContent","randomizeIndex","minIndex","maxIndex","Math","floor","random","cardSuits","cardRanks","interval","minutes","seconds","clearInterval","setInterval","String","timer","setOfCards","i","randomCardSuit","length","randomCardRank","cardElement","push","array","t","j","shuffle","gameSpace","cardElem","createElement","src","appendChild","classList","add","gameCards","setTimeout","gameCard","HTMLImageElement","clickedCards","matchCounter","event","target","compareGameCards"],"sourceRoot":""}