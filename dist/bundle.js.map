{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://card-game/webpack/bootstrap","webpack://card-game/webpack/runtime/define property getters","webpack://card-game/webpack/runtime/hasOwnProperty shorthand","webpack://card-game/./src/render.js","webpack://card-game/./src/timer.js","webpack://card-game/./src/main.js","webpack://card-game/./src/cards.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { GamePageRender } from './main.js'\nexport const startPageRender = () => {\n    const body = document.querySelector('body')\n    body.innerHTML = `\n        <div class=\"container\">\n            <div class=\"container-content\">\n                <h1 class=\"container-title\">Выбери сложность</h1>\n                <div class=\"container-levels\">\n                    <input type=\"radio\" id=\"basic\" class=\"container-level\" name=\"levels\" value=\"1\"></input>\n                    <label class=\"radio-label\" for=\"basic\">1</label>\n                    <input type=\"radio\" id=\"middle\" class=\"container-level\" name=\"levels\" value=\"2\"></input>\n                    <label class=\"radio-label\" for=\"middle\">2</label>\n                    <input type=\"radio\" id=\"advanced\" class=\"container-level\" name=\"levels\" value=\"3\"></input>\n                    <label class=\"radio-label\" for=\"advanced\">3</label>\n                </div>\n                <button class=\"start-button\">Старт</button>\n            </div> \n        </div>`\n\n    const startButton = document.querySelector('.start-button')\n    const containerLevels = document.querySelectorAll('.container-level')\n\n    let selectedLevel\n\n    startButton.addEventListener('click', () => {\n        let isChecked = false\n        let numberOfPairs\n        for (const containerLevel of containerLevels) {\n            if (containerLevel.checked === true) {\n                isChecked = true\n                selectedLevel = containerLevel.value\n            }\n        }\n        if (!isChecked) {\n            alert('Выберите уровень')\n            return\n        }\n\n        if (selectedLevel === '1') {\n            numberOfPairs = 3\n        }\n        if (selectedLevel === '2') {\n            numberOfPairs = 6\n        }\n        if (selectedLevel === '3') {\n            numberOfPairs = 9\n        }\n\n        GamePageRender(numberOfPairs)\n    })\n}\n","export function timer() {\n    const minutesElement = document.querySelector('.minutes')\n    const secondsElement = document.querySelector('.seconds')\n\n    let minutes = 0\n    let seconds = 0\n    let interval\n\n    clearInterval(interval)\n    interval = setInterval(startTimer, 1000)\n\n    function startTimer() {\n        seconds++\n        if (seconds <= 9) {\n            secondsElement.textContent = '0' + seconds\n        }\n        if (seconds > 9) {\n            secondsElement.textContent = seconds\n        }\n        if (seconds > 60) {\n            minutes++\n            minutesElement.textContent = '0' + minutes\n            seconds = 0\n            secondsElement.textContent = '0' + seconds\n        }\n    }\n}\n\nexport function gameTimeHandler() {\n    const minutesElement = document.querySelector('.minutes')\n    const secondsElement = document.querySelector('.seconds')\n\n    let gameTime = minutesElement.textContent + secondsElement.textContent\n    return gameTime\n}\n","import { compareGameCards } from './cards.js'\nimport { startPageRender } from './render.js'\nimport { timer } from './timer.js'\n\nstartPageRender()\n\nconst cardSuits = ['Diamonds', 'Clubs', 'Spades', 'Hearts']\nconst cardRanks = ['6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n\nconst body = document.querySelector('body')\n\nexport const GamePageRender = (numberOfPairs) => {\n    body.innerHTML = `\n        <div class=\"game-page-container\">\n            <div class=\"timer\">\n                <div class=\"time\">\n                    <span class=\"timer-number minutes\">00.</span>\n                    <span>min</span>\n                </div>\n                <div class=\"time\">\n                    <span class=\"timer-number seconds\">00</span>\n                    <span>sec</span>\n                </div>\n            </div>\n            <div class=\"button\">\n                <button class=\"restart-button\">Начать заново</button>\n            </div>\n        </div>\n        <div class=\"game-container\">\n            <div class=\"game-space\"></div>\n        </div>`\n\n    document.querySelector('.restart-button').addEventListener('click', () => {\n        startPageRender()\n    })\n\n    //Таймер\n    timer()\n\n    let setOfCards = []\n\n    const gameSpace = document.querySelector('.game-space')\n    for (let i = 0; i < numberOfPairs; i++) {\n        const randomCardSuits = Math.floor(Math.random() * cardSuits.length)\n        const randomCardRanks = Math.floor(Math.random() * cardRanks.length)\n\n        let cardElement =\n            '../static/images/' +\n            cardRanks[randomCardRanks] +\n            cardSuits[randomCardSuits] +\n            '.jpg'\n\n        setOfCards.push(cardElement, cardElement)\n    }\n\n    const shuffledSetOfCards = setOfCards.sort(() => Math.random() - 0.5)\n    for (let j = 0; j < shuffledSetOfCards.length; j++) {\n        const cardElem = document.createElement('img')\n        cardElem.src = setOfCards[j]\n        gameSpace.appendChild(cardElem)\n        cardElem.classList.add('game-card')\n    }\n\n    const gameCards = document.querySelectorAll('.game-card')\n    const hideGameCards = () => {\n        for (const gameCard of gameCards) {\n            gameCard.src = '../static/images/background.jpg'\n        }\n    }\n    setTimeout(hideGameCards, 5000)\n    compareGameCards(gameCards, setOfCards)\n}\n","import { startPageRender } from './render.js'\nimport { gameTimeHandler } from './timer.js'\n\nexport const compareGameCards = (gameCards, setOfCards) => {\n    let clickedCards = []\n    let matchCounter = 0\n    const body = document.querySelector('body')\n\n    for (let i = 0; i < gameCards.length; i++) {\n        const gameCard = gameCards[i]\n        gameCard.addEventListener('click', (event) => {\n            event.target.src = setOfCards[i]\n\n            if (!clickedCards[0]) {\n                clickedCards[0] = setOfCards[i]\n            } else {\n                clickedCards[1] = setOfCards[i]\n\n                if (clickedCards[0] === clickedCards[1]) {\n                    matchCounter++\n\n                    if (matchCounter === setOfCards.length / 2) {\n                        // alert('Вы выиграли')\n                        body.innerHTML = `\n                            <div class=\"game-result-container\">\n                                <div class=\"container-content\">\n                                    <img src=\"./static/images/celebration.png\">\n                                    <h1 class=\"container-title\">Вы выиграли!</h1>\n                                        <div class=\"time-spent\">\n                                            <h3>Затраченное время:</h3>\n                                            <h2 class=\"time-spent-timer\">${gameTimeHandler()}</h2>\n                                        </div>\n                                    <button class=\"restart-button\">Начать заново</button>\n                                </div>\n                            </div>`\n\n                        document\n                            .querySelector('.restart-button')\n                            .addEventListener('click', () => {\n                                startPageRender()\n                            })\n                    }\n                } else {\n                    // alert('Вы проиграли')\n                    body.innerHTML = `\n                            <div class=\"game-result-container\">\n                                <div class=\"container-content\">\n                                    <img src=\"./static/images/dead.png\">\n                                    <h1 class=\"container-title\">Вы проиграли!</h1>\n                                        <div class=\"time-spent\">\n                                            <h3>Затраченное время:</h3>\n                                            <h2 class=\"time-spent-timer\">${gameTimeHandler()}</h2>\n                                        </div>\n                                    <button class=\"restart-button\">Начать заново</button>\n                                </div>\n                            </div>`\n\n                    document\n                        .querySelector('.restart-button')\n                        .addEventListener('click', () => {\n                            startPageRender()\n                        })\n                }\n                clickedCards = []\n            }\n        })\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","startPageRender","document","querySelector","innerHTML","startButton","containerLevels","querySelectorAll","selectedLevel","addEventListener","numberOfPairs","isChecked","containerLevel","checked","value","GamePageRender","alert","gameTimeHandler","minutesElement","secondsElement","textContent","cardSuits","cardRanks","body","interval","minutes","seconds","clearInterval","setInterval","timer","setOfCards","gameSpace","i","randomCardSuits","Math","floor","random","length","randomCardRanks","cardElement","push","shuffledSetOfCards","sort","j","cardElem","createElement","src","appendChild","classList","add","gameCards","setTimeout","gameCard","clickedCards","matchCounter","event","target","compareGameCards"],"sourceRoot":""}